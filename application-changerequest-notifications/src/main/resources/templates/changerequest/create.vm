## ---------------------------------------------------------------------------
## See the NOTICE file distributed with this work for additional
## information regarding copyright ownership.
##
## This is free software; you can redistribute it and/or modify it
## under the terms of the GNU Lesser General Public License as
## published by the Free Software Foundation; either version 2.1 of
## the License, or (at your option) any later version.
##
## This software is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
## Lesser General Public License for more details.
##
## You should have received a copy of the GNU Lesser General Public
## License along with this software; if not, write to the Free
## Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
## 02110-1301 USA, or see the FSF site: http://www.fsf.org.
## ---------------------------------------------------------------------------
#template('notification/macros.vm')

###
### Icons
###
#set ($eventDescriptor = $services.eventstream.getDescriptorForEventType($compositeEvent.type, $xcontext.isMainWiki()))
#set ($mainIcon = $eventDescriptor.applicationIcon)
#set ($smallIcon = $eventDescriptor.eventTypeIcon)

#foreach($event in $compositeEvent.events)
    ## Backward compatibility mechanism: before 1.13 events were sent with the modified doc as data, not the CR doc
    ## so we cannot rely on the event.document all the time to display properly the info.
    #set ($crReference = $changeRequestReferences.get($event))
    #set ($crDocument = $xwiki.getDocument($crReference))
    #if ($event.parameters)
        #set ($fileChangeId = $event.parameters.get('changerequest.filechange.id'))
        #set ($changeRequestId = $event.parameters.get('changerequest.id'))

        #if ($event.document == $crReference)
            ## If the reference is the same than the document sent: we're in newer version, we need to access the CR
            #set ($changeRequestOpt = $services.changerequest.getChangeRequest($changeRequestId))
            ## For some reason the CR cannot be accessed (might be deleted). We cannot guess info anymore.
            #if ($changeRequestOpt.isEmpty())
                #set ($modifiedDocument = $NULL)
            #else
                #set ($changeRequest = $changeRequestOpt.get())
                #set ($fileChangeOpt = $changeRequest.getFileChangeById($fileChangeId))
                #if ($fileChangeOpt.isEmpty())
                    #set ($modifiedDocument = $NULL)
                #else
                    #set ($modifiedDocument = $xwiki.getDocument($fileChangeOpt.get().targetEntity))
                #end
            #end
        #else
            ## If the reference is not the same we are before 1.13 so the modified doc was sent as data.
            #set ($modifiedDocument = $xwiki.getDocument($event.document))
        #end
    #else
        ## If there's no event parameters we assume the event was sent with the modified document
        #set ($modifiedDocument = $xwiki.getDocument($event.document))
    #end

    #define ($concernedDocument)
        <div class="changerequest-impacted-page">
            #set ($title = $NULL)
            #if ($event.parameters)
                #set ($title = $services.changerequest.getPageTitle($changeRequestId, $fileChangeId))
            #end

            #if ($modifiedDocument)
                #if ("$!title" == '')
                    #set ($title = $modifiedDocument.displayTitle)
                #end
                <a href="$!escapetool.xml($modifiedDocument.getURL())">$escapetool.xml($title)</a>
                ## Notifications are rendered in the context of their wiki, so we need to use the XWikiContext#originalWikiId
                ## to actually know where the request comes from.
                #set ($modifiedDocumentRef = $modifiedDocument.documentReference)

                #if ($xcontext.getContext().getOriginalWikiId() != $modifiedDocumentRef.wikiReference.name)
                    <span class="text-muted">($services.wiki.getById($modifiedDocumentRef.wikiReference.name).prettyName)</span>
                #end
            #else
                $services.localization.render('notifications.events.unknownDocument')
            #end
        </div>
    #end
    ###
    ### Content
    ###
    #define($content)
    <div class="notification-page">
        ## Here, we have 2 choices:
        ## 1 - Render the title with "plain/1.0" syntax, and use $escapetool.xml() to make sure we don't inject HTML tags
        ## 2 - Render the title with HTML syntax ($document.displayTitle), and don't use $escapetool.xml() (because it
        ##     would be useless to render HTML tags only to remove them with escape tools afterwards).
        ##
        ## I've played with both, and I have chosen solution 2 for the following reasons:
        ##
        ## * in the title of a document, you cannot add HTML tags or nasty content (HTML macro is not rendered, so HTML
        ##   tags are escaped), so we don't need to use escape tools.
        ##
        ## * In a page named "SOME      -     EXAMPLE", the white spaces are represented as `&nbsp;` when rendered with
        ##   the HTML renderer meanwhile they are trimmed when rendered with the plain text renderer.
        ##
        ## * It's consistent with the way the title is displayed in the page itself (using html, see: `titlevars.vm`).
      <a href="$!escapetool.xml($crDocument.getURL())">$crDocument.displayTitle</a>
        ## Notifications are rendered in the context of their wiki, so we need to use the XWikiContext#originalWikiId
        ## to actually know where the request comes from.
        #if ($xcontext.getContext().getOriginalWikiId() != $crReference.wikiReference.name)
            <span class="text-muted">($services.wiki.getById($crReference.wikiReference.name).prettyName)</span>
        #end
    </div>
    <div class="notification-description">
        $services.localization.render("changerequest.notifications.create.description",
                ["#displayNotificationEventUser($event.user, false)", "$concernedDocument"])
      <div><small class="text-muted">$escapetool.xml($services.date.displayTimeAgo($compositeEvent.dates.get(0)))</small></div>
    </div>
    #end
    ###
    ### Display
    ###
    #displayNotificationEventSkeleton($mainIcon, $smallIcon, $content, "")
#end