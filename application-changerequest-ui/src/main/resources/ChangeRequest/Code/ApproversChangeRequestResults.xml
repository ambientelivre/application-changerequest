<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.5" reference="ChangeRequest.Code.ApproversChangeRequestResults" locale="">
  <web>ChangeRequest.Code</web>
  <name>ApproversChangeRequestResults</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>Main.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title>ApproversChangeRequestResults</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{include reference="XWiki.LiveTableResultsMacros" /}}

{{velocity wiki="false"}}
#if ($request.userDoc)
#if("$!{request.xpage}" == 'plain')
  $response.setContentType('application/json')
#end
##==================
## Initialize the map that will store the JSON data.
##==================
#set($map = {})
##==================
## Build the JSON in memory using the previous map
##==================
#gridresult_buildJSON("$!request.classname" $request.collist.split(',') $map)
##==================
## Modify the JSON data from the map or add new data.
##==================
#set ($newRows = [])
#foreach($row in $map.get('rows'))
  #set ($changeRequestId = $services.model.resolveDocument($row.get('doc_fullName')).lastSpaceReference.name)
  #set ($changeRequestOpt = $services.changerequest.getChangeRequest($changeRequestId))
  #if ($changeRequestOpt.isPresent() &amp;&amp; ($services.changerequest.authorization.isAuthorizedToReview($changeRequestOpt.get(), $request.userDoc) || ($services.changerequest.authorization.isAuthorizedToReviewAsDelegate($changeRequestOpt.get(), $request.userDoc))))
    #set ($changeRequest = $changeRequestOpt.get())
    #set ($hasBeenReviewed = $services.changerequest.review.alreadyReviewed($request.userDoc, $changeRequest))
    #define ($reviews)
      &lt;span class="review-information"&gt;
        $changeRequest.reviews.size() $services.localization.render('changerequest.livetable.approvers.reviews.performed')
        #if ($hasBeenReviewed)
        &lt;br /&gt;
        &lt;span class="already-reviewed label label-success"&gt;
          $services.localization.render('changerequest.livetable.approvers.reviews.alreadyReviewed')
        &lt;/span&gt;
        #end
      &lt;/span&gt;
    #end
    #set ($discard = $row.put('reviews', "$reviews"))
    #set($discard = $newRows.add($row))
  #end
#end
## FIXME: this should be improved for pagination
#set ($discard = $map.put('rows', $newRows))
#set ($discard = $map.put('count', $newRows.size()))
##==================
## Serialize the map in the JSON format.
##==================
$jsontool.serialize($map)
#else
Technical page to display approvers livetable results.
#end
{{/velocity}}</content>
</xwikidoc>
