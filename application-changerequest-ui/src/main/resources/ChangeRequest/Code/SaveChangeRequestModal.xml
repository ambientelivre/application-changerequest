<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.5" reference="ChangeRequest.Code.SaveChangeRequestModal" locale="">
  <web>ChangeRequest.Code</web>
  <name>SaveChangeRequestModal</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>Main.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <originalMetadataAuthor>xwiki:XWiki.Admin</originalMetadataAuthor>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title>SaveChangeRequestModal</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{include reference='ChangeRequest.Code.ChangeRequestPicker'/}}
{{velocity}}
## Hack inspired by Michael Hamann and Marius Florea from https://github.com/xwiki/xwiki-platform/pull/1733#discussion_r774453667
#macro (stripHTMLMacro $displayOutput)
  $stringtool.removeEnd($stringtool.removeStart($displayOutput, '{{html clean="false" wiki="false"}}'), '{{/html}}')
#end
#if ($request.get('getmodal') == 1)
#set ($isEditingChangeRequest = ("$!request.get('changerequest')" != ''))
#set ($setApprovers = $request.get('setApprovers') == 1)
#set ($isApproversEdition = $request.get('manageApprovers') == 1)
#if ($isApproversEdition || $setApprovers)
  #set ($approversPageReference = $services.model.resolveDocument($request.get('docChange')))
  ##set ($approversPageReference = $services.model.createDocumentReference($approversPageReference, $request.get('approversLocale')))
  #set ($approversDoc = $xwiki.getDocument($approversPageReference))
  #set ($approversXObject = $approversDoc.getObject('ChangeRequest.Code.ApproversClass'))
  #if (!$approversXObject)
    #set ($shouldAddXObject = true)
    #set ($approversXObject = $approversDoc.newObject('ChangeRequest.Code.ApproversClass'))
  #end
  #set ($usersApproversInput = $approversXObject.display('usersApprovers', 'edit'))
  #set ($groupsApproversInput = $approversXObject.display('groupsApprovers', 'edit'))
  #define ($approversPanel)
    &lt;div class="panel #if($isApproversEdition)panel-primary #else panel-default#end"&gt;
      &lt;div class="panel-heading" role="tab" id="approversHeading"&gt;
        &lt;h4 class="panel-title"&gt;$services.localization.render('changerequest.savemodal.approvers.heading')&lt;/h4&gt;
      &lt;/div&gt;&lt;!-- End panel heading --&gt;
      &lt;div id="approversSelection" class="panel-body" role="tabpanel" aria-labelledby="approversHeading"&gt;
        &lt;div class="form-group"&gt;
          &lt;label for="approverUsers"&gt;$services.localization.render('changerequest.savemodal.approvers.users')&lt;/label&gt;
          #stripHTMLMacro($usersApproversInput)
        &lt;/div&gt;
        &lt;div class="form-group"&gt;
          &lt;label for="approverUsers"&gt;$services.localization.render('changerequest.savemodal.approvers.groups')&lt;/label&gt;
          #stripHTMLMacro($groupsApproversInput)
        &lt;/div&gt;
        #if ($shouldAddXObject)
          &lt;input type="hidden" name="addedObjects" value="ChangeRequest.Code.ApproversClass_$approversXObject.number" /&gt;
        #end
      &lt;/div&gt;&lt;!-- End panel body --&gt;
    &lt;/div&gt;&lt;!-- End panel --&gt;
  #end
#end
#if ($isApproversEdition)
  #set ($modalHeaderTranslationPrefix = 'changerequest.savemodal.approvers.header')
#else
  #set ($modalHeaderTranslationPrefix = 'changerequest.savemodal.header')
#end
&lt;div class="modal text-left" id="changeRequestModal" tabindex="-1" role="dialog" aria-hidden="true" data-backdrop="static"&gt;
  &lt;div class="modal-dialog modal-lg"&gt;
    &lt;div class="modal-content"&gt;
      &lt;div class="modal-header"&gt;
        &lt;button type="button" class="close" data-dismiss="modal" aria-hidden="true"&gt;&amp;times;&lt;/button&gt;
        &lt;div class="modal-title" id="changeRequestModalTitle"&gt;
          $services.localization.render("${modalHeaderTranslationPrefix}.title")
        &lt;/div&gt;
        &lt;hr /&gt;
        &lt;div class="xHint"&gt;
          $services.localization.render("${modalHeaderTranslationPrefix}.hint")
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="modal-body"&gt;
      &lt;form id="saveChangeRequestForm"&gt;
        &lt;div class="panel-group" id="changeRequestChoiceGroup" role="tablist" aria-multiselectable="false"&gt;
          #if ($isApproversEdition)
            $approversPanel
          #end
          &lt;div class="panel panel-default"&gt;
            &lt;div class="panel-heading" role="tab" id="newChangeRequestHeading"&gt;
               &lt;h4 class="panel-title"&gt;
                  &lt;a role="button" data-toggle="collapse" data-parent="#changeRequestChoiceGroup" href="#newChangeRequest" aria-expanded="true" aria-controls="newChangeRequest"&gt;
                    $services.localization.render('changerequest.savemodal.create.heading')
                  &lt;/a&gt;
               &lt;/h4&gt;
             &lt;/div&gt;&lt;!-- End panel heading --&gt;
           &lt;div id="newChangeRequest" class="panel-collapse collapse #if(!$isEditingChangeRequest)in#end" role="tabpanel" aria-labelledby="newChangeRequestHeading"&gt;
            &lt;div class="panel-body"&gt;
              &lt;div class="form-group"&gt;
                &lt;label for="crTitle"&gt;$services.localization.render('changerequest.savemodal.create.input.title')&lt;/label&gt;
                &lt;input type="text" class="form-control" id="crTitle" /&gt;
              &lt;/div&gt;
              &lt;div class="checkbox"&gt;
                &lt;label for="crDraft"&gt;
                &lt;input type="checkbox" id="crDraft" value="1" /&gt; $services.localization.render('changerequest.savemodal.create.input.draft')
                &lt;/label&gt;
              &lt;/div&gt;
            &lt;/div&gt;&lt;!-- End panel body --&gt;
           &lt;/div&gt;&lt;!-- End panel collapse --&gt;
          &lt;/div&gt;&lt;!-- End panel --&gt;
          &lt;div class="panel panel-default"&gt;
            &lt;div class="panel-heading" role="tab" id="addToExistingChangeRequestHeading"&gt;
               &lt;h4 class="panel-title"&gt;
                  &lt;a role="button" data-toggle="collapse" data-parent="#changeRequestChoiceGroup" href="#addToExistingChangeRequest" aria-expanded="false" aria-controls="addToExistingChangeRequest"&gt;
                    $services.localization.render('changerequest.savemodal.edit.heading')
                  &lt;/a&gt;
               &lt;/h4&gt;
             &lt;/div&gt;&lt;!-- End panel heading --&gt;
             &lt;div id="addToExistingChangeRequest" class="panel-collapse collapse #if($isEditingChangeRequest)in#end" role="tabpanel" aria-labelledby="addToExistingChangeRequestHeading"&gt;
              &lt;div class="panel-body"&gt;
                &lt;label for="existingCRSelector"&gt;$services.localization.render('changerequest.savemodal.edit.input.selector')&lt;/label&gt;
                  #set ($crPickerParameters = {
                    'name': 'existingCRSelector',
                    'id': 'existingCRSelector',
                    'class': 'form-control',
                    'value': "$!request.get('changerequest')",
                    'data-docchange': "$!request.get('docChange')"
                  })
                  #changeRequestPicker($crPickerParameters)
              &lt;/div&gt;&lt;!-- End panel body --&gt;
           &lt;/div&gt;&lt;!-- End panel collapse --&gt;
          &lt;/div&gt;&lt;!-- End panel --&gt;
          #if ($setApprovers)
            $approversPanel
          #end
        &lt;/div&gt;&lt;!-- End panel group --&gt;
        &lt;/form&gt;
      &lt;/div&gt;&lt;!-- End modal body --&gt;
      &lt;div class="modal-footer"&gt;
        &lt;input type="button" id="saveChangeRequest" class="btn btn-primary" value="$services.localization.render('save')" #if(!$isEditingChangeRequest)disabled="disabled"#end /&gt;
        &lt;input type="button" id="cancelChangeRequest" class="btn btn-default" value="$services.localization.render('cancel')" data-dismiss="modal" aria-hidden="true" /&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
#elseif ($request.get('checktemplate') == 1)
  #set ($isTemplateSupported = $services.changerequest.isTemplateSupported($request.get('template')))
  #jsonResponse({
    'isSupported': $isTemplateSupported
  })
#end
{{/velocity}}</content>
  <object>
    <name>ChangeRequest.Code.SaveChangeRequestModal</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>462ecab8-22fe-473d-ade4-215ea540fb7e</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <defaultValue>long</defaultValue>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>require.config({
  paths: {
    'xwiki-suggestPropertyValues': "$xwiki.getSkinFile('uicomponents/suggest/suggestPropertyValues.js', true)" +
      "?v=$escapetool.url($xwiki.version)"
  }
});
define('SaveChangeRequestModal', ['jquery', 'xwiki-meta', 'xwiki-suggestPropertyValues'], function ($, xm) {

  var saveChangeRequestModal = function (configName) {
    var self = this;
    var saveChangeRequestModalDoc = new XWiki.Document(new XWiki.DocumentReference('xwiki', ['ChangeRequest', 'Code'], 'SaveChangeRequestModal'));
    var configSelector = "#" + configName;
    var saveConfig = JSON.parse($(configSelector).text());
    var asyncQuery = true;

    var saveChangeRequest = function (event) {
      var isNewCR = $('#existingCRSelector').val() === "";
      var actionURL;
      var form;
      if (saveConfig.isApproversEdition) {
        form = $('#saveChangeRequestForm');
      } else if (saveConfig.isDeletion) {
        form = $('#delete_changerequest').parents('form');
        asyncQuery = false;
      } else if (saveConfig.isInplaceEditing) {
        form = $('.sticky-buttons-wrapper .sticky-buttons').data('fakeForm');
      } else {
        form = $('#save_changerequest').parents('form');
      }
      
      var urlParams = new URLSearchParams(window.location.search);
      if (isNewCR) {
        var crTitleField = $("&lt;input&gt;", {
          'type': 'hidden',
          'name': 'crTitle',
          'value': $('#crTitle').val()
        });
        form.append(crTitleField);

        var crDraftField = $("&lt;input&gt;", {
          'type': 'hidden',
          'name': 'crDraft',
          'value': $('#crDraft:checked').val()
        });
        form.append(crDraftField);
        actionURL = saveConfig.createURL;
      } else {
        actionURL = saveConfig.addChangesURL.replace("__CR__", $('#existingCRSelector').val());
      }
      var actionURLParams = new URLSearchParams();
      
      if (asyncQuery) {
        actionURLParams.append("async", "1");
      }
      
      if (!isNewCR &amp;&amp; urlParams.has('changerequest')) {
        actionURLParams.append("fromchangerequest", "1")
      }
      var docField = $("&lt;input&gt;", {
        'type': 'hidden',
        'name': 'docReference',
        'value': xm.documentReference
      });
      form.append(docField);
      
      if (saveConfig.isCreate) {
        form.append($('#approversSelection').find('select'));
        form.append($('#approversSelection').find('input[name=addedObjects]'));
      }

      $(document).on('xwiki:document:saved', function(event, data) {
        if (data &amp;&amp; data.changeRequestId) {
          window.location.href = data.changeRequestUrl;
        }
      });
      if (saveConfig.isDeletion) {
        actionURLParams.append("deletion", "1");
        form.attr('action', actionURL + "?" + actionURLParams.toString());
        $('#saveChangeRequest').trigger('xwiki:document:saved');
        form.submit();
      } else {
        // if there's a template we specify to use sync save, in order to trick actionButtons.js
        if (saveConfig.isInplaceEditing) {
          form['action'] = actionURL + "?" + actionURLParams.toString();
          if (form['template'] !== "") {
            form['async'] = "false";
          }
          $('#xwikicontent').trigger('xwiki:actions:beforeSave');
          $('#xwikicontent').trigger('xwiki:actions:save', {form: form, continue: true});
        } else {
          form.attr('action', actionURL + "?" + actionURLParams.toString());
          if (form.find('input[name=template]').val() !== "") {
            form.find('input[name=async]').val('false');
          }
          $(document).trigger('xwiki:actions:beforeSave');
          $(document).trigger('xwiki:actions:save', {form: form[0], continue: true});
        }
      }
    };

    var validateForm = function () {
      var crTitle = $('#crTitle').val();
      var crSelector = $('#existingCRSelector').val();
      var saveButton = $('#saveChangeRequest');
      if (crTitle === "" &amp;&amp; crSelector === "") {
        saveButton.attr('disabled', 'disabled');
      } else {
        saveButton.removeAttr('disabled');
      }
    };

    self.openModal = function () {
      // FIXME: be checked, we should probably destroy the modal actually.
      if ($('#changeRequestModal').length &gt; 0) {
        $('#changeRequestModal').modal('show');
      } else {
        var urlParams = new URLSearchParams(window.location.search);
        var modalUrl = saveChangeRequestModalDoc.getURL('get');

        // FIXME: we're missing the doc locale no?
        var data = {
          'getmodal': 1,
          'outputSyntax': 'plain',
          'docChange': xm.documentReference.toString()
        }

        if (urlParams.has('changerequest')) {
          data['changerequest'] = urlParams.get('changerequest');
        }
        if (saveConfig.isApproversEdition) {
          data['manageApprovers'] = 1;
        }
        if (saveConfig.isCreate) {
          data['setApprovers'] = 1;
        }
        $.get(modalUrl, data).done(function (data) {
          $('body').append(data);
          $('#changeRequestModal').modal('show');
          $('#saveChangeRequest').on('click', function (event) {
            saveChangeRequest(event);
          });
          $('#crTitle').on('change', validateForm);
          $('#existingCRSelector').on('change', validateForm);
          $(document).trigger('xwiki:dom:updated', {'elements': $('#changeRequestModal').toArray()});
        }).fail(function (data) {
          console.log(data);
          new XWiki.widgets.Notification("Error while saving the change request:" + data, 'error')
        });
      }
    };
  };
  
  return saveChangeRequestModal;
});</code>
    </property>
    <property>
      <name>Save change request modal</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
</xwikidoc>
